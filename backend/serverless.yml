service:
  name: music-library

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true

provider:

  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    SONGS_TABLE: Songs-${self:provider.stage}
    SPOTIFY_API_CLIENT_ID: 24cce64510b14bf3bdc2d68a0f834df8
    SPOTIFY_API_CLIENT_SECRET_ID: SpotifySecret-${self:provider.stage}
    SPOTIFY_API_CLIENT_SECRET_FIELD: spotifySecret
#    IS_OFFLINE: true

custom:
# uncomment for local execution
#  dynamodb:
#    start:
#      port: 8000
#      inMemory: true
#      migrate: true
#    stages:
#      - dev
#  serverless-offline:
#    httpPort: 3003

  documentation:
    api:
      info:
        version: v1.0.0
        title: My Music Library API
        description: Serverless application for creating a personal music library

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetSongs:
    handler: src/lambda/http/getSongs.handler
    events:
      - http:
          method: get
          path: songs
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SONGS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  AddSong:
    handler: src/lambda/http/addSong.handler
    events:
      - http:
          method: post
          path: songs
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/requests/add-song-request.json)}
          documentation:
            summary: Add a song to personal music library
            description: Add a song to personal music library
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SONGS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  DeleteSong:
    handler: src/lambda/http/deleteSong.handler
    events:
      - http:
          method: delete
          path: songs/{trackId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SONGS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  SearchSong:
    handler: src/lambda/http/searchSong.handler
    events:
      - http:
          method: get
          path: searchSong
          cors: true
          authorizer: Auth
          request:
            parameters:
              querystrings:
                searchTerm: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref SpotifySecret
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    SongsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: trackId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: trackId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SONGS_TABLE}

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Spotify secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ':'
                    - - 'arn:aws:iam:'
                      - Ref: AWS::AccountId
                      - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/spotifyKey-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    SpotifySecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.SPOTIFY_API_CLIENT_SECRET_ID}
        Description: Spotify secret
        KmsKeyId: !Ref KMSKey

